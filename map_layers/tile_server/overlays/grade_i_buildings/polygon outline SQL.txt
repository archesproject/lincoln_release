Hi Adam,

You are correct in your assertions here.  You will need to tune the simplify value for your data so that any slivers/distortion are acceptable to the eye.  It defaults to 1.0, which is quite aggressive, so you will generally want to set this value yourself.  Just bear in mind that reducing/removing simplification (as you mention, setting to 0 will remove it entirely) will increase the size of your tiles and result in greater network latency when loading tiles, so you will need to weigh both sides (presentation & performance) of this compromise as they both impact the overall UX.

You are also correct that you could create another table or view that shows just the outlines of your polygons.  You could also do this directly in your tileserver SQL; here’s an example using the PostGIS function "ST_ExteriorRing” and Arches's "mv_geojson_geoms” view:

SELECT resourceinstanceid::text,
		false AS poly_outline,
		(row_number() over ())::text as __id__,
		geom AS __geometry__
	FROM mv_geojson_geoms
	WHERE ST_GeometryType(geom) = 'ST_Polygon'
UNION
SELECT resourceinstanceid::text,
		true AS poly_outline,
		(row_number() over ())::text||'-outline' as __id__,
		ST_ExteriorRing(geom) AS __geometry__
	FROM mv_geojson_geoms
	WHERE ST_GeometryType(geom) = 'ST_Polygon';

Then you can use filters in your mapbox styles to paint the outlines and fills based on the “poly_outline” property.  Bear in mind, that this approach sacrifices additional server overhead (due to the spatial processing to create the exterior rings, primarily) in an attempt to reduce the data volume in your tiles.  This may, however, backfire depending on the size of your geometries relative to the zoom levels users will commonly view them at.  ie you will be able to clip your geometries, but each tile will include duplicated coordinate values for every vertex.  If duplicating vertices generates more coordinates per tile than turning clipping off then this approach could both increase server overhead and tile data size.

Of course, which solution is best depends on your data, application and use cases.  I would encourage anyone to use some trial & error to determine what will work best for a particular context.  You can use the admin UI to modify your tileserver configurations, which is a nice way to try things out w/o having to use SQL to update records directly.

Also, you should always consider using caching, but be aware that you’ll need to manage your own caches (for example, creating scheduled jobs to truncate/reseed, if needed).

- Rob